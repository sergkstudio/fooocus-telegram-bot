import os
import logging
import asyncio
from io import BytesIO
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, MessageHandler, filters
from gradio_client import Client

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

TELEGRAM_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
API_URL = os.getenv('FOOOCUS_API_URL', 'http://localhost:7860')

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üé® –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")

async def generate_image(update: Update, context: ContextTypes.DEFAULT_TYPE):
    prompt = update.message.text
    if not prompt:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å")
        return

    try:
        msg = await update.message.reply_text("üîÑ –ù–∞—á–∏–Ω–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é...")
        
        client = Client(API_URL)
        
        # –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ fn_index=67
        job = client.submit(
            True,                # Generate Image Grid
            prompt,              # –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–º–ø—Ç
            "",                  # –ù–µ–≥–∞—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–º–ø—Ç
            ["Fooocus V2"],      # –°—Ç–∏–ª–∏
            "Quality",           # –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
            "704√ó1408",         # –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω
            1,                   # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            "png",               # –§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞
            "Random",            # –°–∏–¥
            True,                # –ß–∏—Ç–∞—Ç—å wildcards –ø–æ –ø–æ—Ä—è–¥–∫—É
            0,                   # –†–µ–∑–∫–æ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            7.5,                 # –®–∫–∞–ª–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞
            "juggernautXL_v8Rundiffusion.safetensors",  # –ë–∞–∑–æ–≤–∞—è –º–æ–¥–µ–ª—å
            "None",              # –£—Ç–æ—á–Ω—è—é—â–∞—è –º–æ–¥–µ–ª—å
            0.5,                 # –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —É—Ç–æ—á–Ω—è—é—â–µ–π –º–æ–¥–µ–ª–∏
            True, False, "None", -2,  # LoRA 1
            True, False, "None", -2,  # LoRA 2
            True, False, "None", -2,  # LoRA 3
            True, False, "None", -2,  # LoRA 4
            True, False, "None", -2,  # LoRA 5
            False, "", "Disabled", None, [], None, "", None, False, False, False, False,
            0.1, 0.1, 0, 1, 1, "euler", "normal", "Default (model)", -1, -1, -1, -1, -1, -1,
            True, True, False, False, 100, 200, "joint", 0, True, 0, 0, 0, 0, False, False,
            "None", 0, 0, True, False, -64, True, True, "fooocus", None, 0, 0, "ImagePrompt",
            None, 0, 0, "ImagePrompt", None, 0, 0, "ImagePrompt", None, 0, 0, "ImagePrompt",
            False, -64, False, None, True, "Disabled", "Before First Enhancement",
            "Original Prompts", True, "", "", "", "u2net", "full", "vit_b", 0, 0, 0, False,
            "None", 0, 0, -64, True, True, "", "", "", "u2net", "full", "vit_b", 0, 0, 0, False,
            "None", 0, 0, -64, True, True, "", "", "", "u2net", "full", "vit_b", 0, 0, 0, False,
            "None", 0, 0, -64, True,
            fn_index=67
        )

        # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        while not job.done():
            await asyncio.sleep(5)
            await msg.edit_text("‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ...")

        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —á–µ—Ä–µ–∑ fn_index=68
        result = client.predict(fn_index=68)
        
        if result and len(result) > 2:
            image_url = result[2][0]['url']  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Ç—Ä–µ—Ç—å–µ–º —ç–ª–µ–º–µ–Ω—Ç–µ
            response = requests.get(image_url)
            
            bio = BytesIO(response.content)
            bio.name = 'generated_image.png'
            bio.seek(0)
            
            await msg.delete()
            await update.message.reply_photo(photo=bio)
        else:
            await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")

    except Exception as e:
        logging.error(f"Error: {str(e)}")
        await update.message.reply_text("üî• –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")

def main():
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, generate_image))
    app.run_polling()

if __name__ == "__main__":
    main()